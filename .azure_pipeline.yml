# Adapted from https://github.com/pandas-dev/pandas/blob/master/azure-pipelines.yml

# Global variables for all jobs
variables:
  VIRTUALENV: 'testvenv'
  JUNITXML: 'test-data.xml'
  CODECOV_TOKEN: 'cee0e505-c12e-4139-aa43-621fb16a2347'

schedules:
- cron: "0 1 * * *"  # 1am UTC
  displayName: Run nightly build
  branches:
    include:
    - master
  always: true

stages:
- stage:
  jobs:

  - job: 'linting'
    displayName: Linting
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.12'
      - script: |
          pip install black
        displayName: install black
      - script: |
          black --check --diff .
        displayName: Run black

  - template: continuous_integration/windows.yml
    parameters:
      name: Windows
      vmImage: windows-latest
      matrix:
        pylatest_conda_forge_mkl:
          PYTHON_VERSION: '*'
          PACKAGER: 'conda-forge'
          BLAS: 'mkl'
        py310_conda_forge_openblas:
          PYTHON_VERSION: '3.10'
          PACKAGER: 'conda-forge'
          BLAS: 'openblas'
        py39_conda:
          PYTHON_VERSION: '3.9'
          PACKAGER: 'conda'
        py38_pip:
          PYTHON_VERSION: '3.8'
          PACKAGER: 'pip'

  - template: continuous_integration/posix.yml
    parameters:
      name: Linux
      vmImage: ubuntu-20.04
      matrix:
        # Linux environment to test that packages that comes with Ubuntu 20.04
        # are correctly handled.
        py38_ubuntu_atlas_gcc_gcc:
          PACKAGER: 'ubuntu'
          APT_BLAS: 'libatlas3-base libatlas-base-dev'
          PYTHON_VERSION: '3.8'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
        py38_ubuntu_openblas_gcc_gcc:
          PACKAGER: 'ubuntu'
          APT_BLAS: 'libopenblas-base libopenblas-dev'
          PYTHON_VERSION: '3.8'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
        # Linux + Python 3.9 and homogeneous runtime nesting.
        py39_conda_openblas_clang_clang:
          PACKAGER: 'conda'
          PYTHON_VERSION: '3.9'
          BLAS: 'openblas'
          CC_OUTER_LOOP: 'clang-10'
          CC_INNER_LOOP: 'clang-10'
        # Linux environment with MKL and Clang (known to be unsafe for
        # threadpoolctl) to only test the warning from multiple OpenMP.
        pylatest_conda_mkl_clang_gcc:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          BLAS: 'mkl'
          CC_OUTER_LOOP: 'clang-10'
          CC_INNER_LOOP: 'gcc'
          TESTS: 'libomp_libiomp_warning'
        # Linux environment with MKL, safe for threadpoolctl.
        pylatest_conda_mkl_gcc_gcc:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          BLAS: 'mkl'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
          MKL_THREADING_LAYER: 'INTEL'
        # Linux + Python 3.8 with numpy / scipy installed with pip from PyPI
        # and heterogeneous OpenMP runtimes.
        py38_pip_openblas_gcc_clang:
          PACKAGER: 'pip'
          PYTHON_VERSION: '3.8'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'clang-10'
        # Linux environment with numpy from conda-forge channel and openblas-openmp
        pylatest_conda_forge:
          PACKAGER: 'conda-forge'
          PYTHON_VERSION: '*'
          BLAS: 'openblas'
          OPENBLAS_THREADING_LAYER: 'openmp'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
        # Linux environment with no numpy and heterogeneous OpenMP runtimes.
        pylatest_conda_nonumpy_gcc_clang:
          PACKAGER: 'conda'
          NO_NUMPY: 'true'
          PYTHON_VERSION: '*'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'clang-10'
        # Linux environment with numpy linked to BLIS
        pylatest_blis_gcc_clang_openmp:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          INSTALL_BLAS: 'blis'
          BLIS_NUM_THREADS: '4'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
          BLIS_CC: 'clang-10'
          BLIS_ENABLE_THREADING: 'openmp'
        pylatest_blis_clang_gcc_pthreads:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          INSTALL_BLAS: 'blis'
          BLIS_NUM_THREADS: '4'
          CC_OUTER_LOOP: 'clang-10'
          CC_INNER_LOOP: 'clang-10'
          BLIS_CC: 'gcc-8'
          BLIS_ENABLE_THREADING: 'pthreads'
        pylatest_blis_no_threading:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          INSTALL_BLAS: 'blis'
          BLIS_NUM_THREADS: '1'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'
          BLIS_CC: 'gcc-8'
          BLIS_ENABLE_THREADING: 'no'
        pylatest_flexiblas:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          INSTALL_BLAS: 'flexiblas'
          CC_OUTER_LOOP: 'gcc'
          CC_INNER_LOOP: 'gcc'


  - template: continuous_integration/posix.yml
    parameters:
      name: macOS
      vmImage: macOS-11
      matrix:
        # MacOS environment with OpenMP installed through homebrew
        py38_conda_homebrew_libomp:
          PACKAGER: 'conda'
          PYTHON_VERSION: '3.8'
          BLAS: 'openblas'
          CC_OUTER_LOOP: 'clang'
          CC_INNER_LOOP: 'clang'
          INSTALL_LIBOMP: 'homebrew'
        # MacOS env with OpenBLAS and OpenMP installed through conda-forge compilers
        py39_conda_forge_clang_openblas:
          PACKAGER: 'conda-forge'
          PYTHON_VERSION: '*'
          BLAS: 'openblas'
          CC_OUTER_LOOP: 'clang'
          CC_INNER_LOOP: 'clang'
          INSTALL_LIBOMP: 'conda-forge'
        # MacOS environment with OpenMP installed through conda-forge compilers
        pylatest_conda_forge_clang:
          PACKAGER: 'conda-forge'
          PYTHON_VERSION: '*'
          BLAS: 'mkl'
          CC_OUTER_LOOP: 'clang'
          CC_INNER_LOOP: 'clang'
          INSTALL_LIBOMP: 'conda-forge'
        pylatest_flexiblas:
          PACKAGER: 'conda'
          PYTHON_VERSION: '*'
          INSTALL_BLAS: 'flexiblas'
          CC_OUTER_LOOP: 'clang'
          CC_INNER_LOOP: 'clang'

- stage:
  jobs:
  # Meta-test to ensure that at least of the above CI configurations had
  # the necessary platform settings to execute each test without raising
  # skipping.
  - job: 'no_test_always_skipped'
    displayName: 'No test always skipped'
    pool:
      vmImage: ubuntu-latest
    steps:
      - download: current
      - script: |
          python continuous_integration/check_no_test_skipped.py $(Pipeline.Workspace)
        displayName: 'No test always skipped'
